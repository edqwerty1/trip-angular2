{"version":3,"sources":["location-store.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASA;gBAOI,8BAAoB,KAAW;oBAPnC,iBAkDC;oBA3CuB,UAAK,GAAL,KAAK,CAAM;oBAC3B,IAAI,CAAC,UAAU,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;oBAEpC,IAAI,CAAC,UAAU,GAAG,IAAI,eAAU,CAAc,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,kBAAkB,GAAG,QAAQ,EAAlC,CAAkC,CAAC;yBACxF,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;yBACpC,KAAK,EAAE,CAAC;gBACjB,CAAC;;gBAED,4CAAa,GAAb;oBAAA,iBAUC;oBATG,OAAO,CAAC,GAAG,CAAC,aAAK,CAAC,IAAI,CAAC,CAAC;oBACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAI,aAAK,CAAC,IAAI,wBAAqB,CAAC;yBAC7C,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBAClC,SAAS,CAAC,UAAA,IAAI;wBACX,KAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;wBACjC,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;oBAC5D,CAAC,EACD,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAC1B,CAAC;gBACV,CAAC;;gBAED,qCAAM,GAAN,UAAO,UAAU;oBAAjB,iBAUC;oBATG,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,aAAK,CAAC,IAAI,kBAAa,UAAU,YAAS,EACzD,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAC5D,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;yBACpB,SAAS,CAAC,UAAA,IAAI;wBACX,KAAI,CAAC,aAAa,EAAE,CAAC;oBACzB,CAAC,EAAE,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;gBAExC,CAAC;gBAED,uCAAQ,GAAR,UAAS,UAAU;oBAAnB,iBAUC;oBATG,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,aAAK,CAAC,IAAI,kBAAa,UAAU,cAAW,EAC3D,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAC5D,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;yBACpB,SAAS,CAAC,UAAA,IAAI;wBACX,KAAI,CAAC,aAAa,EAAE,CAAC;oBACzB,CAAC,EAAE,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;gBAExC,CAAC;gBAlDL;oBAAC,iBAAU,EAAE;;wCAAA;gBAmDb,2BAAC;YAAD,CAlDA,AAkDC,IAAA;YAlDD,uDAkDC,CAAA","file":"location-store.service.js","sourcesContent":["import {ILocations, ILocation} from './models/locations';\r\nimport { Injectable } from '@angular/core';\r\nimport {Http, Response, Headers} from '@angular/http';\r\nimport {Observable, Observer} from 'rxjs/RX';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/startWith';\r\nimport {Hosts} from './hosts';\r\n\r\n@Injectable()\r\nexport class LocationStoreService {\r\n    locations$: Observable<ILocation[]>;\r\n    private _locationsObserver: Observer<ILocation[]>;\r\n    private _dataStore: {\r\n        locations: ILocation[];\r\n    };\r\n\r\n    constructor(private _http: Http) {\r\n        this._dataStore = { locations: [] };\r\n\r\n        this.locations$ = new Observable<ILocation[]>(observer => this._locationsObserver = observer)\r\n            .startWith(this._dataStore.locations)\r\n            .share();\r\n    };\r\n\r\n    loadLocations() {\r\n        console.log(Hosts.Host);\r\n        this._http.get(`${Hosts.Host}/location/locations`)\r\n            .map((res: Response) => res.json())\r\n            .subscribe(data => {\r\n                this._dataStore.locations = data;\r\n                this._locationsObserver.next(this._dataStore.locations);\r\n            },\r\n            error => console.log(error)\r\n            );\r\n    };\r\n\r\n    upVote(locationId) {\r\n        var headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        this._http.post(`${Hosts.Host}/location/${locationId}/upVote`,\r\n            JSON.stringify({ 'userId': localStorage.getItem('userId') }),\r\n            { headers: headers })\r\n            .subscribe(data => {\r\n                this.loadLocations();\r\n            }, error => console.log(error));\r\n\r\n    }\r\n\r\n    downVote(locationId) {\r\n        var headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        this._http.post(`${Hosts.Host}/location/${locationId}/downVote`,\r\n            JSON.stringify({ 'userId': localStorage.getItem('userId') }),\r\n            { headers: headers })\r\n            .subscribe(data => {\r\n                this.loadLocations();\r\n            }, error => console.log(error));\r\n\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}