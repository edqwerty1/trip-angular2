{"version":3,"sources":["user.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAOI,0BAAoB,KAAW;oBAPnC,iBAmCC;oBA5BuB,UAAK,GAAL,KAAK,CAAM;oBAC3B,IAAI,CAAC,UAAU,GAAG,EAAC,IAAI,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAC,CAAC;oBAEzE,IAAI,CAAC,KAAK,GAAG,IAAI,eAAU,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,aAAa,GAAG,QAAQ,EAA7B,CAA6B,CAAC;yBACjE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;yBAC/B,KAAK,EAAE,CAAC;gBACjB,CAAC;;gBAED,gCAAK,GAAL,UAAM,QAAgB,EAAE,QAAgB;oBAAxC,iBAmBC;oBAlBG,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;oBACzE,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC7B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAI,aAAK,CAAC,IAAI,gBAAa,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;yBAClE,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBAClC,SAAS,CAAC,UAAA,QAAQ;wBACf,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAC5C,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAEhD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;wBACxD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAClD,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;wBACtC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAClD,CAAC,EACD,UAAA,KAAK;wBACD,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;wBACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;gBACX,CAAC;gBAnCL;oBAAC,iBAAU,EAAE;;oCAAA;gBAoCb,uBAAC;YAAD,CAnCA,AAmCC,IAAA;YAnCD,+CAmCC,CAAA","file":"user.service.js","sourcesContent":["import {IUser} from './models/user';\r\nimport { Injectable } from '@angular/core';\r\nimport {Http, Response, Headers} from '@angular/http';\r\nimport {Observable, Observer} from 'rxjs/RX';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/startWith';\r\nimport {Hosts} from './hosts';\r\n@Injectable()\r\nexport class UserStoreService {\r\n    user$: Observable<IUser>;\r\n    private _userObserver: Observer<IUser>;\r\n    private _dataStore: {\r\n        user: IUser;\r\n    };\r\n\r\n    constructor(private _http: Http) {\r\n        this._dataStore = {user: { displayName: null, id: null, username: null}};\r\n\r\n        this.user$ = new Observable(observer => this._userObserver = observer)\r\n            .startWith(this._dataStore.user)\r\n            .share();\r\n    };\r\n\r\n    login(username: string, password: string) {\r\n        let body = JSON.stringify({ 'username': username, 'password': password });\r\n         var headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        this._http.post(`${Hosts.Host}/user/login`, body, { headers: headers })\r\n            .map((res: Response) => res.json())\r\n            .subscribe(response => {\r\n                localStorage.setItem('jwt', response.token);\r\n                localStorage.setItem('userId', response.userId);\r\n                \r\n                this._dataStore.user.displayName = response.displayName;\r\n                this._dataStore.user.username = response.username;\r\n                this._dataStore.user.id = response.id;\r\n                this._userObserver.next(this._dataStore.user);\r\n            },\r\n            error => {\r\n                alert(error.text());\r\n                console.log(error.text());\r\n            });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}