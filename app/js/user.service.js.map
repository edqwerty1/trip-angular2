{"version":3,"sources":["user.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAOI,YAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBAC3B,IAAI,CAAC,UAAU,GAAG,EAAC,IAAI,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAC,CAAC;oBAEzE,IAAI,CAAC,KAAK,GAAG,IAAI,eAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;yBACjE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;yBAC/B,KAAK,EAAE,CAAC;gBACjB,CAAC;;gBAED,KAAK,CAAC,QAAgB,EAAE,QAAgB;oBACpC,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;oBACzE,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC7B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;oBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,0CAA0C,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;yBAClF,GAAG,CAAC,CAAC,GAAa,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;yBAClC,SAAS,CAAC,QAAQ;wBACf,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAC5C,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;wBAEhD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;wBACxD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;wBAClD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;wBACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAClD,CAAC,EACD,KAAK;wBACD,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;wBACpB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;gBACX,CAAC;YACL,CAAC;YApCD;gBAAC,iBAAU,EAAE;;gCAAA;YACb,+CAmCC,CAAA","file":"user.service.js","sourcesContent":["import {IUser} from './models/user';\nimport { Injectable } from '@angular/core';\nimport {Http, Response, Headers} from '@angular/http';\nimport {Observable, Observer} from 'rxjs/RX';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/startWith';\n\n@Injectable()\nexport class UserStoreService {\n    user$: Observable<IUser>;\n    private _userObserver: Observer<IUser>;\n    private _dataStore: {\n        user: IUser;\n    };\n\n    constructor(private _http: Http) {\n        this._dataStore = {user: { displayName: null, id: null, username: null}};\n\n        this.user$ = new Observable(observer => this._userObserver = observer)\n            .startWith(this._dataStore.user)\n            .share();\n    };\n\n    login(username: string, password: string) {\n        let body = JSON.stringify({ \"username\": username, \"password\": password });\n         var headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        this._http.post('http://localhost:8080/api/session/create', body, { headers: headers })\n            .map((res: Response) => res.json())\n            .subscribe(response => {\n                localStorage.setItem('jwt', response.token);\n                localStorage.setItem('userId', response.userId);\n                \n                this._dataStore.user.displayName = response.displayName;\n                this._dataStore.user.username = response.username;\n                this._dataStore.user.id = response.id;\n                this._userObserver.next(this._dataStore.user);\n            },\n            error => {\n                alert(error.text());\n                console.log(error.text());\n            });\n    }\n}\n"],"sourceRoot":"/source/"}