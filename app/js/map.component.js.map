{"version":3,"sources":["map.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAWA;gBAII,YAAoB,WAAuB,EAAU,cAAoC;oBAArE,gBAAW,GAAX,WAAW,CAAY;oBAAU,mBAAc,GAAd,cAAc,CAAsB;gBAEzF,CAAC;gBAED,QAAQ;oBACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;oBAChD,IAAI,GAAG,CAAC;oBACR,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO;wBAClC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;wBAC5B,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;4BAC7D,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE;4BAClC,IAAI,EAAE,CAAC;yBACV,CAAC,CAAC;wBAEH,IAAI,QAAQ,GAAG,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;wBACtC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS;4BAC9B,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC;gCACxB,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;gCAE9B,QAAQ,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,KAAK,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,OAAO,EAAE,MAAM;oCAC1G,EAAE,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;wCAEvC,IAAI,aAAa,GAAG;;sCAEV,QAAQ,CAAC,IAAI;4CACP,QAAQ,CAAC,KAAK;4CACd,QAAQ,CAAC,MAAM;mCACxB,CAAC;wCACR,IAAI,UAAU,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC;4CACpC,OAAO,EAAE,aAAa;4CACtB,QAAQ,EAAE,GAAG;yCAChB,CAAC,CAAC;wCAEH,IAAI,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC;4CAC5B,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ;4CACtC,GAAG,EAAE,IAAI,CAAC,GAAG;4CACb,KAAK,EAAE,QAAQ,CAAC,IAAI;yCACvB,CAAC,CAAC;wCACH,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE;4CACxB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;wCACtC,CAAC,CAAC,CAAC;wCACH,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;oCAEtC,CAAC;oCAAC,IAAI,CAAC,CAAC;wCACJ,KAAK,CAAC,uDAAuD,GAAG,MAAM,CAAC,CAAC;oCAC5E,CAAC;gCACL,CAAC,CAAC,CAAA;4BACN,CAAC;wBACL,CAAC,CACA,CAAC;wBAEF,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;oBACxC,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,eAAe;oBAEX,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;gBAElC,CAAC;YACL,CAAC;YAtED;gBAAC,gBAAS,CAAC;oBACP,QAAQ,EAAE,MAAM;oBAChB,WAAW,EAAE,wBAAwB;oBACrC,UAAU,EAAE,EAAE;oBACd,MAAM,EAAE,CAAC,wBAAwB,CAAC;iBACrC,CAAC;;4BAAA;YACF,uCAgEC,CAAA","file":"map.component.js","sourcesContent":["import { Component, AfterViewInit, OnInit } from '@angular/core';\r\nimport {Observable} from 'rxjs/RX';\r\nimport {MapService} from './map.service';\r\nimport {LocationStoreService} from './location-store.service';\r\nimport {ILocation} from './models/locations';\r\n@Component({\r\n    selector: 'maps',\r\n    templateUrl: 'app/map.component.html',\r\n    directives: [],\r\n    styles: ['#map { height: 100%; }']\r\n})\r\nexport class MapComponent implements AfterViewInit, OnInit {\r\n    map;\r\n    locations: Observable<ILocation[]>;\r\n\r\n    constructor(private _mapService: MapService, private _locationStore: LocationStoreService) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.locations = this._locationStore.locations$;\r\n        var map;\r\n        this._mapService.loadAPI.then((mapsAPi) => {\r\n            console.log(\"Promise hit!\");\r\n            this.map = map = new mapsAPi.Map(document.getElementById('map'), {\r\n                center: { lat: 52.12, lng: -1.24 },\r\n                zoom: 8\r\n            });\r\n\r\n            var geocoder = new mapsAPi.Geocoder();\r\n            this.locations.subscribe(locations => {\r\n                for (let loc in locations) {\r\n                    let location = locations[loc];\r\n\r\n                    geocoder.geocode({ 'address': `${location.address.address1}, ${location.address.postCode}` }, (results, status) => {\r\n                        if (status === mapsAPi.GeocoderStatus.OK) {\r\n\r\n                            let contentString = `\r\n                            <div>\r\n                                <h3>${location.name}</h3>\r\n                                <p>Price Â£${location.price}}</p>\r\n                                <p>Nights ${location.nights}</p>\r\n                            </div>`;\r\n                            let infowindow = new mapsAPi.InfoWindow({\r\n                                content: contentString,\r\n                                maxWidth: 200\r\n                            });\r\n\r\n                            let marker = new mapsAPi.Marker({\r\n                                position: results[0].geometry.location,\r\n                                map: this.map,\r\n                                title: location.name\r\n                            });\r\n                            marker.addListener('click', function () {\r\n                                infowindow.open(this.map, marker);\r\n                            });\r\n                            infowindow.open(this.map, marker);\r\n\r\n                        } else {\r\n                            alert('Geocode was not successful for the following reason: ' + status);\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            );\r\n\r\n            this._locationStore.loadLocations();\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n\r\n        this._mapService.initialise();\r\n\r\n    }\r\n}"],"sourceRoot":"/source/"}